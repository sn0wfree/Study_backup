createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Publishing)
logitMusic.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Music)
logitFashion.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Fashion)
logitTheater.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Theater)
logitPhotography.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Photography)
logitArt.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Art)
logitComics.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Comics)
logitTechnology.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Technology)
logitCrafts.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Crafts)
logitJournalism.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Journalism)
logitDance.model <- glm(project_state_code ~
passsucceed_level50+
backedg20+
createdg10+
duration+
log(goal_usd)+
backers_count+
creator_friends_facebook_number+
has_a_video_d+
updates_number+
comments_count
,family=binomial, data=Dance)
anova(object = logitDance.model, test = 'Chisq')
lrtest(logitDance.model)
anova(object = logitDesign.model, test = 'Chisq')
anova(object = logitGames.model, test = 'Chisq')
summary(logitGames.model)
anova(object = logitGames.model, test = 'Chisq')
testdata <- read.csv("~/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/testdata.csv")
View(testdata)
Art<-subset(testdata,testdata['category_round']=='Art')
Comics<-subset(testdata,testdata['category_round']== 'Comics')
Crafts<-subset(testdata,testdata['category_round']== 'Crafts')
Dance<-subset(testdata,testdata['category_round']== 'Dance')
Design<-subset(testdata,testdata['category_round']== 'Design')
Fashion<-subset(testdata,testdata['category_round']== 'Fashion')
FilmandVideo<-subset(testdata,testdata['category_round']== 'Film&Video')
Food<-subset(testdata,testdata['category_round']== 'Food')
Games<-subset(testdata,testdata['category_round']== 'Games')
Journalism<-subset(testdata,testdata['category_round']== 'Journalism')
Music<-subset(testdata,testdata['category_round']== 'Music')
Photography<-subset(testdata,testdata['category_round']== 'Photography')
Publishing<-subset(testdata,testdata['category_round']== 'Publishing')
Technology<-subset(testdata,testdata['category_round']== 'Technology')
Theater<-subset(testdata,testdata['category_round']== 'Theater')
write.csv(Design,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Design.csv")
write.csv(FilmandVideo,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Film&Video.csv")
write.csv(Food,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Food.csv")
write.csv(Games,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Games.csv")
write.csv(Publishing,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Publishing.csv")
write.csv(Music,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Music.csv")
write.csv(Fashion,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Fashion.csv")
write.csv(Theater,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Theater.csv")
write.csv(Photography,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Photography.csv")
write.csv(Art,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Art.csv")
write.csv(Comics,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Comics.csv")
write.csv(Technology,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Technology.csv")
write.csv(Crafts,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Crafts.csv")
write.csv(Journalism,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Journalism.csv")
write.csv(Dance,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/Dance.csv")
testdata <- read.csv("~/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/testdata.csv")
View(testdata)
Art<-subset(testdata,testdata['category_round']=='Art')
Comics<-subset(testdata,testdata['category_round']== 'Comics')
Crafts<-subset(testdata,testdata['category_round']== 'Crafts')
Dance<-subset(testdata,testdata['category_round']== 'Dance')
Design<-subset(testdata,testdata['category_round']== 'Design')
Fashion<-subset(testdata,testdata['category_round']== 'Fashion')
FilmandVideo<-subset(testdata,testdata['category_round']== 'Film&Video')
Food<-subset(testdata,testdata['category_round']== 'Food')
Games<-subset(testdata,testdata['category_round']== 'Games')
Journalism<-subset(testdata,testdata['category_round']== 'Journalism')
Music<-subset(testdata,testdata['category_round']== 'Music')
Photography<-subset(testdata,testdata['category_round']== 'Photography')
Publishing<-subset(testdata,testdata['category_round']== 'Publishing')
Technology<-subset(testdata,testdata['category_round']== 'Technology')
Theater<-subset(testdata,testdata['category_round']== 'Theater')
#do logit model
write.csv(Design,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Design.csv")
write.csv(FilmandVideo,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Film&Video.csv")
write.csv(Food,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Food.csv")
write.csv(Games,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Games.csv")
write.csv(Publishing,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Publishing.csv")
write.csv(Music,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Music.csv")
write.csv(Fashion,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Fashion.csv")
write.csv(Theater,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Theater.csv")
write.csv(Photography,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Photography.csv")
write.csv(Art,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Art.csv")
write.csv(Comics,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Comics.csv")
write.csv(Technology,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Technology.csv")
write.csv(Crafts,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Crafts.csv")
write.csv(Journalism,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Journalism.csv")
write.csv(Dance,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/allcollection/group/Dance.csv")
smallsample <- read.csv("~/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/smallsample.csv")
View(smallsample)
testdata<-smallsample
Art<-subset(testdata,testdata['category_round']=='Art')
Comics<-subset(testdata,testdata['category_round']== 'Comics')
Crafts<-subset(testdata,testdata['category_round']== 'Crafts')
Dance<-subset(testdata,testdata['category_round']== 'Dance')
Design<-subset(testdata,testdata['category_round']== 'Design')
Fashion<-subset(testdata,testdata['category_round']== 'Fashion')
FilmandVideo<-subset(testdata,testdata['category_round']== 'Film&Video')
Food<-subset(testdata,testdata['category_round']== 'Food')
Games<-subset(testdata,testdata['category_round']== 'Games')
Journalism<-subset(testdata,testdata['category_round']== 'Journalism')
Music<-subset(testdata,testdata['category_round']== 'Music')
Photography<-subset(testdata,testdata['category_round']== 'Photography')
Publishing<-subset(testdata,testdata['category_round']== 'Publishing')
Technology<-subset(testdata,testdata['category_round']== 'Technology')
Theater<-subset(testdata,testdata['category_round']== 'Theater')
write.csv(Design,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Design.csv")
write.csv(FilmandVideo,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Film&Video.csv")
write.csv(Food,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Food.csv")
write.csv(Games,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Games.csv")
write.csv(Publishing,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Publishing.csv")
write.csv(Music,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Music.csv")
write.csv(Fashion,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Fashion.csv")
write.csv(Theater,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Theater.csv")
write.csv(Photography,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Photography.csv")
write.csv(Art,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Art.csv")
write.csv(Comics,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Comics.csv")
write.csv(Technology,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Technology.csv")
write.csv(Crafts,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Crafts.csv")
write.csv(Journalism,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Journalism.csv")
write.csv(Dance,file="/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/logistic/greater2creator/group/Dance.csv")
hazardsdata <- read.csv("~/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/hazards/hazardsdata.csv")
View(hazardsdata)
surdataset<-Surv(hazardsdata$SURVIVALDAY,hazardsdata$SUCCESS==1)
library(survival)
surdataset<-Surv(hazardsdata$SURVIVALDAY,hazardsdata$SUCCESS==1)
kmfit1 <- survfit(surdataset~1)
summary(kmfit1)
plot(kmfit1,xlab='survival time in days',ylab='survival probabilities')
kmfit14 <- survfit(surdataset~hazardsdata$FTDPR14_d)
summary(kmfit14)
plot(kmfit14,lty = c('solid', 'dashed'), col=c('red','blue'),xlab='survival time in days',ylab='survival probabilities')
sink("/Users/sn0wfree/Dropbox/BitTorrentSync/kickstarter_dataset/data/empirical_test_data/hazards/coxsurvivaldistribution.txt")
summary(kmfit14)
sink()
View(Wages)
View(Wages)
xx<-Wages
haed(xx)
head(xx)
attach(xx)
wilcox.text
wilcox.test
wilcox.test(xx$Wage[xx$Gender== "Male"],xx$Wage[xx$Gender=="Female"])
wilcox.test(xx$Wage[xx$Gender== "Male"],xx$Wage[xx$Gender=="Female"],alternative = "greater")
wilcox.test(xx$Wage[xx$Gender== "Male"],xx$Wage[xx$Gender=="Female"],alternative = "less")
cor.test.test(xx$Wage[xx$Gender== "Male"],xx$Wage[xx$Gender=="Female"],alternative = "less")
cor.test(xx$Wage[xx$Gender== "Male"],xx$Wage[xx$Gender=="Female"],alternative = "less")
cor.test(xx$Wage[xx$Gender== "Male"],xx$Wage[xx$Gender=="Male"])
cor.test(xx$Wage[xx$Gender== "Male"],xx$Age[xx$Gender=="Male"])
cor.test(xx$Wage,xx$Age)
cor.test(xx$Wage[xx$Gender== "Female"],xx$Age[xx$Gender=="Female"])
cor.test(xx$Age[xx$Gender== "Female"],xx$Wage[xx$Gender=="Female"])
cor.test(xx$Age,xx$Wage)
head(xx)
pairwise.wilcox.test(xx)
pairwise.wilcox.test(g = xx)
plot(xx$Experience,xx$Wage)
plot(xx$Experience,xx$Wage)
cor.test(xx$Experience,xx$Wage)
plot(lowess(xx$Experience,xx$Wage))
cor.test(xx$Experience,xx$Wage,alternative = "greater")
summary(cor.test(xx$Experience,xx$Wage,alternative = "greater"))
y<-xx$Experience[xx$Gender=="Male"]
x<-xx$Experience[xx$Gender=="Female"]
wlicox.test(x,y)
wlicox.test(x,y)
wilcox.test(x,y)
wilcox.test(x,y,alternative = "greater")
wilcox.test(y,x,alternative = "greater")
mean(xx$Experience[xx$Gender=="Male"])
mean(xx$Experience[xx$Gender=="Female"])
wilcox.test(xx$Experience[xx$Gender=="Male"],xx$Experience[xx$Gender=="Female"],alternative = "greater")
table(xx$Experience)
summary(table(xx$Experience))
pie(table(xx$Experience))
barplot(table(xx$Experience))
table(xx$Experience,xx$Gender)
barplot(table(xx$Experience,xx$Gender))
pie(table(xx$Experience,xx$Gender))
hist(table(xx$Experience,xx$Gender))
table(xx$Experience,xx$Gender)
summary(table(xx$Experience,xx$Gender))
pairwise.prop.test(table(xx$Experience,xx$Gender))
wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience==10],xx$Wage[xx$Gender=="Male" & xx$Experience==10])
wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience==13],xx$Wage[xx$Gender=="Male" & xx$Experience==13])
function{}
count(xx$Wage)
counts(xx$Wage)
table(xx$Wage)
summary(table(xx$Wage))
summary(table(xx$Experience))
table(xx$Experience)
for(i in 1:55){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience==i],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 0:55){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience==i],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 0:55){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== [i]],xx$Wage[xx$Gender=="Male" & xx$Experience==[i]])}
for(i in 0:55){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 1:50){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
warnings()
for(i in 10:40){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 10:20){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 10:12){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 10:12){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 1:12){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 1:12){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i],warning()=Fasle)}
for(i in 1:12){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i],warning()=FALSE)}
for(i in 1:12){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i],warning=FALSE}
for(i in 1:12){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i],warnings=FALSE}
for(i in 12:13){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i],warnings=FALSE}
for(i in 12:13){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i]}
for(i in 12:13){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 11:13){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 11:14){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
for(i in 11:14){wilcox.test(xx$Wage[xx$Gender=="Female" & xx$Experience== i ],xx$Wage[xx$Gender=="Male" & xx$Experience==i])}
moredata<-read.csv('/Users/sn0wfree/Desktop/Demographics.csv',header=TRUE)
header(moredata)
head(moredata)
sibs?
)
?sibs
??sibs
head(Wages)
wilcox.test(Wages$Age[Wages$Gender=="Male"],Wages$Age[Wages$Gender=="Female"])
a_test<-wilcox.test(Wages$Age[Wages$Gender=="Male"],Wages$Age[Wages$Gender=="Female"])
table(a_test)
plot(a_test)
draw(a_test)
summary(a_test)
2_tailed<-wilcox.test(Wages$Age[Wages$Gender=="Male"],Wages$Age[Wages$Gender=="Female"])
2tailed<-wilcox.test(Wages$Age[Wages$Gender=="Male"],Wages$Age[Wages$Gender=="Female"])
twotailed<-wilcox.test(Wages$Age[Wages$Gender=="Male"],Wages$Age[Wages$Gender=="Female"])
twotailed<-wilcox.test(Wages$Age[Wages$Gender=="Male"],Wages$Age[Wages$Gender=="Female"],alternative = "greater")
?jitter
table(Wages$Occupation)
pie(table(Wages$Occupation))
?wilcox.test()
runif
runif?
?
)
?runif
str(Wages)
Wages[1]
head(Wages)
head(Wages[1])
head(Wages[,1])
Wages.column
Wages.column()
Wages.column
column(Wages)
column
?column
labels(Wages)
Wages.label
Wages.label
attendSLIM=read.table(pipe("pbpaste"),header=TRUE)
head(attendSLIM)
boxplot(attendSLIM$attendPC,attendSLIM$hwPC)
t.test(attendSLIM$attendPC,attendSLIM$hwPC)
t.test(attendSLIM$attendPC,attendSLIM$hwPC, var.equal=TRUE)
t.test(attendSLIM$attendPC,attendSLIM$hwPC, var.equal = 1)
t.test(attendSLIM$attendPC,attendSLIM$hwPC)
par(mfow=c(4,4))
par(mfrow=c(4,4))
t.test(attendSLIM$attendPC,attendSLIM$hwPC, paried = 1)
t.test(attendSLIM$attendPC,attendSLIM$hwPC, paried = 1)
t.test(attendSLIM$attendPC,attendSLIM$hwPC, paired = 1)
t.test(attendSLIM$attendPC==85)
t.test(attendSLIM$attendPC, mean=85)
t.test(attendSLIM$attendPC, mu=85)
t.test(attendSLIM$attendPC, mu =85, alternative = "less")
t.test(attendSLIM$attendPC,attendSLIM$hwPC, paired = 1)#pair two sample to test the mean
t.test(attendSLIM$attendPC, mu =82.99312)
t.test(attendSLIM$attendPC, mu =81.70956)
wilcox.test(attendSLIM$attendPC, mu =85)
wilcox.test(attendSLIM$attendPC,attendSLIM$hwPC, paired = 1)
t.test(attendSLIM$attendPC)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
summary(cars)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
summary(cars)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
attendSLIM=read.table(pipe("pbpaste"),header=TRUE)
hist(attendSLIM$final)
hist(table(attendSLIM$final))
View(attendSLIM)
View(attendSLIM)
attendSLIM=read.csv("/Users/sn0wfree/Desktop/attendSLIM.csv"),header=TRUE)
attendSLIM=read.csv("/Users/sn0wfree/Desktop/attendSLIM.csv",header=TRUE)
hist(table(attendSLIM$final))
hist(table(attendSLIM$final))
hist(table(attendSLIM$final))
hist((attendSLIM$final))
table(attendSLIM$final>=25,year)
table(attendSLIM$final>=25,attendSLIM$year)
chisq.test(table(attendSLIM$final>=25,attendSLIM$year))
table(attendSLIM$final>=25)
lm{attendSLIM$final~attendSLIM$ACT}
lm(attendSLIM$final~attendSLIM$ACT)
lm(attendSLIM$final~attendSLIM$ACT)
lm(attendSLIM$final~attendSLIM$ACT)
m1<-lm(attendSLIM$final~attendSLIM$ACT)
m1
m1<-lm(attendSLIM$final~attendSLIM$ACT)
summary(m1)
cor.test(attendSLIM$final,attendSLIM$ACT)
boxplot(m1$residuals)
hist(m1$residuals)
qqnorm(m1$residuals)
boxplot(m1$residuals)
hist(m1$residuals)
qqnorm(m1$residuals)
hist(m1$residuals)
qqnorm(m1$residuals)
boxplot(m1$residuals)
qqnorm(m1$residuals)
boxplot(m1$residuals)
hist(m1$residuals)
qqnorm(m1$residuals)
t.test(attendSLIM$attendPC,attendSLIM$hwPC, paired = 1)#pair two sample to test whether the means are equal
boxplot(xlim=attendSLIM$attendPC,ylim=attendSLIM$hwPC)
boxplot(attendSLIM$attendPC,attendSLIM$hwPC)
#*coding==UTF8*
#dataset=attendSLIM.xls
attendSLIM=read.table(pipe("pbpaste"),header=TRUE)
#attendSLIM=read.csv("/Users/sn0wfree/Desktop/attendSLIM.csv",header=TRUE)
head(attendSLIM)
#par(mfrow=c(4,4)) #输出成4*4 的图片组
t.test(attendSLIM$attendPC,attendSLIM$hwPC) #normal t-test
t.test(attendSLIM$attendPC,attendSLIM$hwPC, var.equal = TRUE) #t-test with var as equal # deprecated
t.test(attendSLIM$attendPC,attendSLIM$hwPC, paired = TRUE)#pair two sample to test whether the means are equal
t.test(attendSLIM$attendPC, attendSLIM$hwPC) #normal t-test
#*coding==UTF8*
#dataset=attendSLIM.xls
#attendSLIM=read.table(pipe("pbpaste"),header=TRUE)
attendSLIM=read.csv("/Users/sn0wfree/Desktop/attendSLIM.csv",header=TRUE)
head(attendSLIM)
#par(mfrow=c(4,4)) #输出成4*4 的图片组
t.test?
)
?t.test
vcov(lmboj)
lmobj=lm(wfood~log(totexp)+log(income),data=london)
setwd("/Users/sn0wfree/Dropbox/PhD(1st)/sn0wfree.github.io/BST169_Econometrics/computing/session1-5")#setup the working directory
london<-read.csv('london.csv')# import data from london.csv
lmobj=lm(wfood~log(totexp)+log(income),data=london)
lmobj<-lm(wfood~log(totexp)+log(income),data=london)
summary(lmobj)#summary of the fitted model
vcov(lmobj)# estimated-beta OLS’s estimated variance-covariance matrix (\espison^{hat}_{2}(X'X)_{-1})
x<-cbind(rep(1,length(london$wfood)),log(london$totexp),log(london$income))# create the martix x in the equation (1)
d
resid_of_lmobj<-london$wfood-x%*%coef_of_lmboj#resid(lmobj)
coef_of_lmboj<-solve(t(x)%*%x)%*%t(x)%*%london$wfood#coef(lmobj)
fitted_of_lmobj<-x%*%coef_of_lmboj#fitted(lmobj)
resid_of_lmobj<-london$wfood-x%*%coef_of_lmboj#resid(lmobj)
class(resid_of_lmobj)
solve(resid_of_lmobj,resid_of_lmobj)
solve(resid_of_lmobj)
t(resid_of_lmobj)%*%resid_of_lmobj
vcov(lmboj)
vcov(lmobj)
cov(lmobj)
vcov(lmobj)
cov(coef_of_lmboj[1],coef_of_lmboj[2])
coef_of_lmboj
coef_of_lmboj[1,]
cov(coef_of_lmboj[1,],coef_of_lmboj[2,])
cov(coef_of_lmboj[1,1],coef_of_lmboj[2,1])
cov(coef_of_lmboj[1,1],coef_of_lmboj[1,2])
cov(coef_of_lmboj[1,1],coef_of_lmboj[2,1])
cov(london$income,london$totexp)
cov(log(london$income),log(london$totexp))
deviance_of_lmobj
deviance_of_lmobj<-t(resid_of_lmobj)%*%resid_of_lmobj#just calulate the SSR,equal to deviance(lmobj)
deviance_of_lmobj
deviance_of_lmobj*deviance_of_lmobj*slove
deviance_of_lmobj*deviance_of_lmobj*solve(t(x)%*%x)
deviance_of_lmobj^2*solve(t(x)%*%x)
solve(t(x)%*%x)
var(wfood)
var(london$wfood)
cc<-var(london$wfood)
cc^2
cc^2 *solve(t(x)%*%x)
vcov(lmobj)
cc<-deviance(lmobj)
cc^2 *solve(t(x)%*%x)
cc<-var(log(london$income))
cc^2 *solve(t(x)%*%x)
head(resid(lmobj)) #estimated residuals M_{x,y}
